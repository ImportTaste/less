# Makefile for `less`
# Windows version; MS Visual C/C++
# make (GNU make) version

# `make -f Makefile.win.msvc`

# NOTE: * requires `make` version 4.0+ (minimum needed for correct path functions)
# NOTE: `make` doesn't handle spaces within file names without gyrations (see <https://stackoverflow.com/questions/9838384/can-gnu-make-handle-filenames-with-spaces>@@<https://archive.is/PYKKq>)

NAME = less ## empty/null => autoset to name of containing folder

####

# spell-checker:ignore () brac cmdbuf forwback funcs ifile lessecho lesskey linenum lsystem optfunc opttbl scrsize ttyin

# spell-checker:ignore (targets) realclean vclean veryclean
# spell-checker:ignore (make) CURDIR MAKEFLAGS SHELLSTATUS TERMERR TERMOUT abspath addprefix addsuffix endef findstring firstword ifeq ifneq lastword notdir undefine
#
# spell-checker:ignore (CC) DDEBUG DNDEBUG NDEBUG Ofast Werror Wextra Xclang Xlinker dumpmachine flto flto-visibility-public-std fpie nodefaultlib nologo nothrow
# spell-checker:ignore (abbrev/acronyms) LLVM MSVC MinGW POSIX VCvars
# spell-checker:ignore (libraries) libcmt libgcc libstdc lmsvcrt lstdc stdext
# spell-checker:ignore (jargon) autoset deps delims executables maint multilib
# spell-checker:ignore (names) benhoyt rivy
# spell-checker:ignore (shell/nix) mkdir printf rmdir uname
# spell-checker:ignore (shell/win) COMSPEC SystemDrive SystemRoot findstr findstring mkdir windir
# spell-checker:ignore (utils) goawk
# spell-checker:ignore (vars) BQUOTE CFLAGS CPPFLAGS CXXFLAGS DEFINETYPE DQUOTE EXEEXT LDFLAGS LIBDIR LIBPATH MAKEDIR OBJ_deps OSID SQUOTE devnull falsey

#### Start of system configuration section. ####

CC = cl
CXX = cl
LD = link

## ref: [MSVC Compiler Options] https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx @@ https://archive.is/aOAtH

## /c :: compile only
CFLAGS_COMPILE_ONLY = /c

# Normal/usual flags
## /nologo :: startup without logo display
## /W3 :: set warning level to 3 [1..4, all; increasing level of warning scrutiny]
## /WX :: treat warnings as errors
## /wd4996 :: suppress POSIX function name deprecation warning (#C4996)
## /MT :: static linking
## /EHsc :: enable C++ EH (no SEH exceptions) + extern "C" defaults to nothrow (replaces deprecated /GX)
## /Ox :: maximum optimizations
## /O2 :: maximize speed
## /D "WIN32" :: old/extraneous define
## /D "_CONSOLE" :: old/extraneous define
## /D "NDEBUG" :: deactivate assert()
## /D "_CRT_SECURE_NO_WARNING" :: compiler directive == suppress "unsafe function" compiler warning
CFLAGS = /nologo /W3 /WX /MT /EHsc /Ox /O2 /I "." /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /D "_CRT_SECURE_NO_WARNINGS"
LDFLAGS = /nologo /subsystem:console /incremental:no /machine:I386
# VC6-specific flags
## /ignore:4254 :: suppress "merging sections with different attributes" warning (LNK4254)
LDFLAGS_VC6 = /ignore:4254

# DEBUG flags
## /MTd :: static linking to debug library
## /Od :: disable optimization
## /Gm :: enables minimal rebuild
## /Zi :: generates complete debugging information
#CFLAGS = /nologo /W3 /MTd /EHsc /Od /Gm /Zi /I "." /D "WIN32" /D "DEBUG" /D "_CONSOLE" /c
#LDFLAGS = /nologo /subsystem:console /incremental:yes /debug /machine:I386 ${LDFLAGS_VC6}

LIBS = user32.lib

DEFINETYPE = wn
OBJ_deps = defines.h less.h funcs.h cmd.h

COLOR ?= $(if $(or ${MAKE_TERMOUT},${MAKE_TERMERR}),true,false)
DEBUG ?= false
STATIC ?= true
VERBOSE ?= false
MAKEFLAGS_debug ?= $(if $(findstring d,${MAKEFLAGS}),true,false)## NOTE: use `-d` or `MAKEFLAGS_debug=1`, `--debug[=FLAGS]` does not set MAKEFLAGS correctly (see <https://savannah.gnu.org/bugs/?func=detailitem&item_id=58341>)

#### End of system configuration section. ####

OSID := $(or $(filter win,${OS:Windows_NT=win}),nix)## OSID = [nix,win]

# require at least `make` v4.0 (minimum needed for correct path functions)
MAKE_VERSION_major := $(word 1,$(subst ., ,$(MAKE_VERSION)))
MAKE_VERSION_minor := $(word 2,$(subst ., ,$(MAKE_VERSION)))
MAKE_VERSION_fail := $(filter $(MAKE_VERSION_major),3 2 1 0)
ifeq (${MAKE_VERSION_major},4)
MAKE_VERSION_fail := $(filter $(MAKE_VERSION_minor),)
endif
ifneq ($(MAKE_VERSION_fail),)
$(call %info,MAKE_VERSION=${MAKE_VERSION})
# $(call %info,MAKE_VERSION_major=${MAKE_VERSION_major})
# $(call %info,MAKE_VERSION_minor=${MAKE_VERSION_minor})
$(call %error,`make` v4.0+ required)
endif

# for Windows OS, set SHELL to `%ComSpec%` or `cmd` (note: environment/${OS}=="Windows_NT" for XP, 2000, Vista, 7, 10 ...)
# * `make` may otherwise use an incorrect shell (eg, `bash`), if found; "syntax error: unexpected end of file" error output is indicative
ifeq (${OSID},win)
# use case and location fallbacks; note: assumes *no spaces* within ${ComSpec}, ${SystemRoot}, or ${windir}
COMSPEC := $(or ${ComSpec},${COMSPEC},${comspec})
SystemRoot := $(or ${SystemRoot},${SYSTEMROOT},${systemroot},${windir})
SHELL := $(firstword $(wildcard ${COMSPEC} ${SystemRoot}/System32/cmd.exe) cmd)
endif
$(call %debug,SHELL=${SHELL})

ESCAPE := ## ANSI escape character
color_black = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;30m,)
color_blue = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;34m,)
color_cyan = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;36m,)
color_green = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;32m,)
color_magenta = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;35m,)
color_red = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;31m,)
color_yellow = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;33m,)
color_white = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0;37m,)
color_reset = $(if $(filter-out ${falsey},${COLOR}),${ESCAPE}[0m,)
#
color_success = ${color_green}
color_debug = ${color_cyan}
color_info = ${color_blue}
color_warning = ${color_yellow}
color_error = ${color_red}

%error = $(error ${color_error}ERR!:${color_reset} ${1})
%debug = $(if $(filter-out ${falsey},${MAKEFLAGS_debug}),$(info ${color_debug}debug:${color_reset} ${1}),)
%info = $(info ${color_info}info:${color_reset} ${1})
%success = $(info $(call %success_text,${1}))
%success_text = ${color_success}SUCCESS:${color_reset} ${1}
%warning = $(warning ${color_warning}WARN:${color_reset} ${1})

%eq = $(and $(findstring $(1),$(2)),$(findstring $(2),$(1)))

####

ifeq (${NAME},)
override NAME = $(notdir $(abspath $(dir $(abspath $(lastword ${MAKEFILE_LIST})))))
endif

falsey := 0 f false off n no
override COLOR := $(or $(if $(filter-out ${falsey},${COLOR}),true,false))
override DEBUG := $(or $(if $(filter-out ${falsey},${DEBUG}),true,false))
override STATIC := $(or $(if $(filter-out ${falsey},${STATIC}),true,false))
override VERBOSE := $(or $(if $(filter-out ${falsey},${VERBOSE}),true,false))
override MAKEFLAGS_debug := $(or $(if $(or $(filter-out ${falsey},${MAKEFLAGS_debug}),$(filter-out ${falsey},${MAKEFILE_debug})),true,false))

$(call %debug,DEBUG=${DEBUG})
$(call %debug,VERBOSE=${VERBOSE})

CFLAGS += ${CFLAGS_DEBUG_${DEBUG}}
CFLAGS += ${CFLAGS_VERBOSE_${VERBOSE}}
LDFLAGS += ${LDFLAGS_STATIC_${STATIC}}
LDFLAGS += ${LDFLAGS_${CC}}
LDFLAGS += ${LDFLAGS_${CC}_${OSID}}

$(call %debug,CFLAGS=${CFLAGS})
$(call %debug,LDFLAGS=${LDFLAGS})

####

# NOTE: early configuration; must be done before ${CC} (`clang`) is used as a linker (eg, during configuration)
ifeq (${OSID},win)
ifeq (${CC},clang)
# prior LIB definition may interfere with clang builds when using MSVC
undefine LIB # no 'override' to allow definition on command line
endif
endif

####

devnull := $(if $(filter win,${OSID}),NUL,/dev/null)
, := ,
COMMA := ,
BQUOTE := `
DQUOTE := "
SQUOTE := '
NULL :=
SPACE := $() $()

# detect ${CC}
CC_check_flags := $(if $(filter cl,${CC}),,-v)
ifeq (,$(shell "${CC}" ${CC_check_flags} >${devnull} 2>&1 && echo ${CC} present))
$(call %error,Missing required compiler (`${CC}`))
endif

ifeq (${SPACE},$(findstring ${SPACE},${makefile_abs_path}))
$(call %error,<SPACE>'s within project directory may cause issues)
endif

# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.
ifneq ($(makefile_dir),$(current_dir))
$(call %error,Invalid current directory; this makefile must be invoked from the directory it resides in)
endif

####

# DQUOTE := \"
# BQUOTE := $(firstword \` \`)
# ifeq ($(OS),Windows_NT)
# DQUOTE := $(subst \,,${DQUOTE})
# BQUOTE := $(subst \,,${BQUOTE})
# endif

makefile_path := $(lastword ${MAKEFILE_LIST})
makefile_abs_path := $(abspath ${makefile_path})
makefile_dir := $(abspath $(dir ${makefile_abs_path}))
# ifeq (${OS},Windows_NT)
# current_dir := $(abspath $(shell "$(COMSPEC)" /x/d/c echo %CD%))## %CD% requires CMD extensions
# else
# current_dir := $(abspath $(shell echo $$PWD))
# endif
current_dir = ${CURDIR}

$(call %debug,makefile_path="$(makefile_path)")
$(call %debug,makefile_abs_path="$(makefile_abs_path)")
$(call %debug,makefile_dir="$(makefile_dir)")
$(call %debug,current_dir="$(current_dir)")

OUT_DIR_EXT := $(if $(filter-out ${falsey},${STATIC}),,.dynamic)

ARCH_default := i686
ARCH_i686 := i686 x86
ARCH_x86_64 := x64 x86_64
ARCH_allowed := $(sort 32 x32 ${ARCH_i686} 64 ${ARCH_x86_64})
ifneq (${ARCH},$(filter ${ARCH},${ARCH_allowed}))
$(call %error,Unknown architecture "$(ARCH)"; valid values are [""$(subst $(SPACE),$(),$(addprefix ${COMMA}${DQUOTE},$(addsuffix ${DQUOTE},${ARCH_allowed})))])
endif

ifneq (${TARGET},)
CFLAGS += --target=$(TARGET)
OUT_DIR_EXT := ${OUT_DIR_EXT}.$(TARGET)
else
CC_machine := $(shell ${CC} $(if $(filter cl,${CC}),,-dumpmachine) 2>&1)
CC_ARCH := $(or $(filter $(subst -, ,${CC_machine}),${ARCH_i686} ${ARCH_x86_64}),${ARCH_default})
CC_ARCH_ID := $(if $(filter ${CC_ARCH},32 x32 ${ARCH_i686}),32,64)
override ARCH := $(or ${ARCH},${CC_ARCH})
ARCH_ID := $(if $(filter ${ARCH},32 x32 ${ARCH_i686}),32,64)
CFLAGS += $(if $(filter cl,${CC}),,-m${ARCH_ID})
LDFLAGS += $(if $(filter cl,${CC}),,-m${ARCH_ID})
OUT_DIR_EXT =.x${ARCH_ID}
endif # defined ${TARGET}

$(call %debug,ARCH="${ARCH}")
$(call %debug,ARCH_ID="${ARCH_ID}")
$(call %debug,CC_machine="${CC_machine}")
$(call %debug,CC_ARCH="${CC_ARCH}")
$(call %debug,CC_ARCH_ID="${CC_ARCH_ID}")
$(call %debug,STATIC="${STATIC}")
$(call %debug,TARGET="${TARGET}")

$(call %debug,OUT_DIR_EXT="${OUT_DIR_EXT}")

####

OS_PREFIX=
ifeq (${OSID},win)
OSID_name  ?= windows
OS_PREFIX  := win.
CC_o       := $(or $(if $(filter cl,${CC}),/Fe),-o${SPACE})
LD_o       := $(or $(if $(filter cl,${CC}),/out:),-o${SPACE})
EXEEXT     := .exe
O          := $(if $(filter cl,${CC}),obj,o)
#
CP         := copy /y
AWK        := goawk
ECHO       := echo
GREP       := grep
MKDIR      := mkdir
RM         := del
RM_r       := $(RM) /s
RMDIR      := rmdir /s/q
FIND       := "${SystemRoot}\System32\find"
FINDSTR    := "${SystemRoot}\System32\findstr"
MORE       := "${SystemRoot}\System32\more"
SORT       := "${SystemRoot}\System32\sort"
STRIP      := $(or $(if $(filter clang,${CC}),llvm-strip),strip)
#
ECHO_NL    := echo.
ECHO_DQ    :=
ECHO_SQ    :=
else
OSID_name  ?= $(shell uname | tr '[:upper:]' '[:lower:]')
OS_PREFIX  := ${OSID_name}.
CC_o       := -o${SPACE}
LD_o       := -o${SPACE}
EXEEXT     :=
O          := o
#
CP         := cp
AWK        := awk
ECHO       := echo
GREP       := grep
MKDIR      := mkdir -p
RM         := rm
RM_r       := ${RM} -r
RMDIR      := ${RM} -r
SORT       := sort
STRIP      := strip
#
ECHO_NL    := echo
ECHO_DQ    := "
ECHO_SQ    := '
endif

####

BUILD_DIR ?= \#build
CONFIG	  ?= $(if $(filter-out ${falsey},${DEBUG}),debug,release)

SRC_DIR = .
# OUT_DIR = ${BUILD_DIR}/$(OS_PREFIX)$(CONFIG).${CC}$(OUT_DIR_EXT)
# BIN_DIR = ${OUT_DIR}/bin
# OBJ_DIR = ${OUT_DIR}/obj
OUT_DIR = .
BIN_DIR = .
OBJ_DIR = .

SRC_files := $(wildcard ${SRC_DIR}/*.c ${SRC_DIR}/*.cpp ${SRC_DIR}/*.cxx)
# SRC_files := $(addprefix ",$(addsuffix ",$(SRC_files)))
OBJ_files := $(SRC_files)
OBJ_files := $(OBJ_files:${SRC_DIR}/%.c=${OBJ_DIR}/%.${O})
OBJ_files := $(OBJ_files:${SRC_DIR}/%.cpp=${OBJ_DIR}/%.${O})
OBJ_files := $(OBJ_files:${SRC_DIR}/%.cxx=${OBJ_DIR}/%.${O})

$(call %debug,SRC_DIR='${SRC_DIR}')
$(call %debug,SRC_files='$(SRC_files)')
$(call %debug,OBJ_files='$(OBJ_files)')

####

# work within ${CURDIR} (build directories may not yet be created)
test_file_stem = $(subst ${SPACE},_,__MAKE__${CC}_${ARCH}_${TARGET}_test__)
test_file_cc_string = ${CC_o}${test_file_stem}${EXEEXT}
ifeq (${OSID},win)
ifneq (${CC},cl)
ARCH_available := $(shell ${ECHO} \#include ^<stdio.h^> > ${test_file_stem}.c && ${ECHO} int main(void){printf("${test_file_stem}");return 0;} >> ${test_file_stem}.c && ${CC} $(filter-out ${CFLAGS_VERBOSE_true},${CFLAGS}) ${test_file_stem}.c ${test_file_target_string} >${devnull} && ${ECHO} true& ${RM} ${test_file_stem}${EXEEXT} ${test_file_stem}.*)
endif
ARCH_available := $(shell ${ECHO} \#include ^<stdio.h^> > ${test_file_stem}.c && ${ECHO} int main(void){printf("${test_file_stem}");return 0;} >> ${test_file_stem}.c && ${CC} $(filter-out ${CFLAGS_VERBOSE_true},${CFLAGS}) ${test_file_stem}.c ${test_file_target_string} >${devnull} && ${ECHO} true& ${RM} ${test_file_stem}${EXEEXT} ${test_file_stem}.*)
else
ARCH_available := $(shell ${ECHO} '\#include <stdio.h>' > ${test_file_stem}.c && ${ECHO} 'int main(void){printf("${test_file_stem}");return 0;}' >> ${test_file_stem}.c && ${CC} $(filter-out ${CFLAGS_VERBOSE_true},${CFLAGS}) ${test_file_stem}.c ${test_file_target_string} >${devnull} && ${ECHO} true; ${RM} ${test_file_stem}${EXEEXT} ${test_file_stem}.*)
endif
$(call %debug,.SHELLSTATUS=${.SHELLSTATUS})
$(call %debug,ARCH_available="${ARCH_available}")

ifneq (,$(or $(filter-out ${ARCH_available},true), $(and $(filter cl,${CC}), $(filter-out ${ARCH_ID},${CC_ARCH_ID}))))
$(call %error,$(if ${TARGET},Architecture/Target "${ARCH}/${TARGET}",Architecture "${ARCH}") is unavailable/unimplemented for this version of `${CC}`)
endif

####

PROJECT_TARGET = ${BIN_DIR}/${NAME}${EXEEXT}
${PROJECT_TARGET}: # *default* target (see recipe/rule below)

####

AUX_EXES = ${BIN_DIR}/lessecho${EXEEXT} ${BIN_DIR}/lesskey${EXEEXT}

OBJ_files := $(filter-out ${SRC_DIR}/lessecho.c ${SRC_DIR}/lesskey.c ${SRC_DIR}/scrsize.c,${SRC_files})
OBJ_files := $(OBJ_files:${SRC_DIR}/%.c=${OBJ_DIR}/%.${O})
OBJ_files := $(OBJ_files:${SRC_DIR}/%.cpp=${OBJ_DIR}/%.${O})
OBJ_files := $(OBJ_files:${SRC_DIR}/%.cxx=${OBJ_DIR}/%.${O})

# OBJ_files := \
# 	main.${O} screen.${O} brac.${O} ch.${O} charset.${O} cmdbuf.${O} \
# 	command.${O} cvt.${O} decode.${O} edit.${O} filename.${O} forwback.${O} \
# 	help.${O} ifile.${O} input.${O} jump.${O} line.${O} linenum.${O} \
# 	lsystem.${O} mark.${O} optfunc.${O} option.${O} opttbl.${O} os.${O} \
# 	output.${O} pattern.${O} position.${O} prompt.${O} search.${O} signal.${O} \
# 	tags.${O} ttyin.${O} version.${O} regexp.${O}

$(call %debug,OBJ_files=${OBJ_files})

####

is_VC6 = ${shell "${CC}" 2>&1 | ${FINDSTR} /i /c:"compiler version 12."}

# VC6-specific flags
ifneq (,${is_VC6})
## /ignore:4254 :: suppress "merging sections with different attributes" warning (LNK4254)
LDFLAGS += ${LDFLAGS_VC6}
endif

####

${AUX_EXES}: %${EXEEXT}: %.${O} version.${O} | ${BIN_DIR}
	${LD} ${LDFLAGS} "$<" "version.${O}" ${LIBS} /out:"$@"
	@${ECHO} ${ECHO_SQ}$(call %success_text,made '$@'.)${ECHO_SQ}

${OBJ_files}: ${OBJ_deps} | ${OBJ_DIR}

defines.h: defines.${DEFINETYPE}
	${CP} defines.${DEFINETYPE} defines.h

####

.PHONY: help
make_help_alias ?= $(if $(call %eq,Makefile,${makefile_path}),Makefile,make -f "${makefile_path}")
help: ## Display help
	@${ECHO} ${BQUOTE}${make_help_alias}${BQUOTE}
	@${ECHO} Usage: ${BQUOTE}${make_help_alias} [ARCH=..] [COLOR=..] [DEBUG=..] [STATIC=..] [TARGET=..] [VERBOSE=..] [MAKE_TARGET...]${BQUOTE}
	@${ECHO} Builds ${SQUOTE}${PROJECT_TARGET}${SQUOTE} within ${DQUOTE}$(current_dir)${DQUOTE}
	@${ECHO_NL}
	@${ECHO} MAKE_TARGETs:
	@${ECHO_NL}
ifeq (${OSID},win)
	@${FINDSTR} "^[a-zA-Z-]*:.*##" "${makefile_path}" | ${SORT} | for /f "tokens=1-2,* delims=:#" %%g in ('${MORE}') do @(@call set "t=%%g                " & @call echo ${color_success}%%t:~0,15%%${color_reset} ${color_info}%%i${color_reset} )
else
	@${GREP} -P "(?i)^[[:alpha:]-]+:" "${makefile_path}" | ${SORT} | ${AWK} 'match($$0,"^([[:alpha:]]+):.*?##\\s*(.*)$$",m){ printf "${color_success}%-10s${color_reset}\t${color_info}%s${color_reset}\n", m[1], m[2] }'
endif

.PHONY: run
run: ${PROJECT_TARGET} ## Build/execute project executable
	@"$^"

####

.PHONY: clean
clean: ## Remove build artifacts (including intermediate files)
	@if EXIST "*.${O}" ${RM} "*.${O}" && echo "*.${O}" file^(s^) removed
	@if EXIST "defines.h" ${RM} "defines.h" && echo "defines.h" removed
	@if EXIST "${PROJECT_TARGET}" ${RM} "${PROJECT_TARGET}" && echo "${PROJECT_TARGET}" removed
	@for %%G in (${AUX_EXES}) do if EXIST "%%G" ${RM} "%%G" && echo "%%G" removed

####

.PHONY: all build build-aux compile realclean rebuild vclean veryclean
all: build build-aux ## Build all project executables
build: ${PROJECT_TARGET} ## Build project (`less`)
build-aux: ${AUX_EXES} ## Build auxillary executables (`lessecho` and `lesskey`)
compile: ${OBJ_files} ## Build intermediate files
realclean: clean
rebuild: clean build ## Clean and rebuild project
vclean: realclean
veryclean: realclean

####

${PROJECT_TARGET}: ${OBJ_files} ${makefile_abs_path} | ${BIN_DIR}
	${LD} ${LDFLAGS} $(addprefix ",$(addsuffix ",${OBJ_files})) ${LIBS} ${LD_o}"$@"
ifeq (,$(and ${STRIP},$(filter-out ${falsey},${DEBUG})))
	${STRIP} "$@"
endif
	@${ECHO} ${ECHO_SQ}$(call %success_text,made '$@'.)${ECHO_SQ}

${OBJ_DIR}/%.${O}: ${SRC_DIR}/%.c ${makefile_abs_path} | ${OBJ_DIR}
	${CC} ${CFLAGS_COMPILE_ONLY} ${CXXFLAGS} ${CXXFLAGS_${CC}} ${CFLAGS} "$<" ${CC_o}"$@"

${OBJ_DIR}/%.${O}: ${SRC_DIR}/%.cpp ${makefile_abs_path} | ${OBJ_DIR}
	${CXX} ${CFLAGS_COMPILE_ONLY} ${CXXFLAGS} ${CXXFLAGS_${CC}} ${CFLAGS} "$<" ${CC_o}"$@"

${OBJ_DIR}/%.${O}: ${SRC_DIR}/%.cxx ${makefile_abs_path} | ${OBJ_DIR}
	${CXX} ${CFLAGS_COMPILE_ONLY} ${CXXFLAGS} ${CXXFLAGS_${CC}} ${CFLAGS} "$<" ${CC_o}"$@"

# ${BIN_DIR}:
# 	${MKDIR} "${BIN_DIR}"

# ${OBJ_DIR}:
# 	${MKDIR} "${OBJ_DIR}"

# ${OUT_DIR}:
# 	${MKDIR} "${OUT_DIR}"
