# Makefile for `less`
# Windows version; MS Visual C/C++
# make (GNU make) version

# `make -f Makefile.win.msvc`

NAME=less

# spell-checker:ignore (targets) distclean realclean vclean veryclean
# spell-checker:ignore (make) abspath firstword ifeq ifndef ifneq lastword undefine vclean veryclean
#
# spell-checker:ignore (acronyms/names) Borland Borland's LLVM MSVC MinGW POSIX VCvars
# spell-checker:ignore (flags/options) DDEBUG DNDEBUG NDEBUG Werror Wextra Xclang defaultlib dumpmachine flto flto-visibility-public-std libcmt nologo nothrow
# spell-checker:ignore (jargon) multilib
# spell-checker:ignore (shell/win) COMSPEC SystemDrive SystemRoot findstr findstring windir
# spell-checker:ignore (utils) ilink nmake
# spell-checker:ignore (vars) BQUOTE CFLAGS CPPFLAGS CXXFLAGS DEFINETYPE DQUOTE EXEEXT LDFLAGS LIBDIR LIBPATH MAKEDIR OBJ_deps devnull
# spell-checker:ignore () brac cmdbuf forwback funcs ifile lessecho lesskey linenum lsystem optfunc opttbl stdext ttyin

#### Start of system configuration section. ####

CC = cl
CXX = cl

## ref: [MSVC Compiler Options] https://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx @@ https://archive.is/aOAtH

## /c :: compile only
CFLAGS_COMPILE_ONLY = /c

# Normal/usual flags
## /nologo :: startup without logo display
## /W3 :: set warning level to 3 [1..4, all; increasing level of warning scrutiny]
## /WX :: treat warnings as errors
## /wd4996 :: suppress POSIX function name deprecation warning (#C4996)
## /MT :: static linking
## /EHsc :: enable C++ EH (no SEH exceptions) + extern "C" defaults to nothrow (replaces deprecated /GX)
## /Ox :: maximum optimizations
## /O2 :: maximize speed
## /D "WIN32" :: old/extraneous define
## /D "_CONSOLE" :: old/extraneous define
## /D "NDEBUG" :: deactivate assert()
## /D "_CRT_SECURE_NO_WARNING" :: compiler directive == suppress "unsafe function" compiler warning
CFLAGS = /nologo /W3 /WX /MT /EHsc /Ox /O2 /I "." /D "WIN32" /D "NDEBUG" /D "_CONSOLE" /D "_CRT_SECURE_NO_WARNINGS"
LDFLAGS = /nologo /subsystem:console /incremental:no /machine:I386
# VC6-specific flags
## /ignore:4254 :: suppress "merging sections with different attributes" warning (LNK4254)
LDFLAGS_VC6 = /ignore:4254

# DEBUG flags
## /MTd :: static linking to debug library
## /Od :: disable optimization
## /Gm :: enables minimal rebuild
## /Zi :: generates complete debugging information
#CFLAGS = /nologo /W3 /MTd /EHsc /Od /Gm /Zi /I "." /D "WIN32" /D "DEBUG" /D "_CONSOLE" /c
#LDFLAGS = /nologo /subsystem:console /incremental:yes /debug /machine:I386 ${LDFLAGS_VC6}

LD = link
LIBS = user32.lib

EXEEXT = .exe
O = obj

CP = copy

DEFINETYPE = wn
OBJ_deps = defines.h less.h funcs.h cmd.h

#### End of system configuration section. ####

BUILD_DIR ?= \#build
ifeq (${DEBUG},0)
CONFIG	  ?= release
else
CONFIG	  ?= debug
endif

# require at least `make` v4.0 (minimum needed for correct path functions)
MAKE_VERSION_major := $(word 1,$(subst ., ,$(MAKE_VERSION)))
MAKE_VERSION_minor := $(word 2,$(subst ., ,$(MAKE_VERSION)))
MAKE_VERSION_fail := $(filter $(MAKE_VERSION_major),3 2 1 0)
ifeq (${MAKE_VERSION_major},4)
MAKE_VERSION_fail := $(filter $(MAKE_VERSION_minor),)
endif
ifneq ($(MAKE_VERSION_fail),)
$(info MAKE_VERSION=${MAKE_VERSION})
# $(info MAKE_VERSION_major=${MAKE_VERSION_major})
# $(info MAKE_VERSION_minor=${MAKE_VERSION_minor})
$(error ERR!: `make` v4.0+ required)
endif

# for Windows OS, set SHELL to `%ComSpec%` or `cmd` (note: environment/${OS}=="Windows_NT" for XP, 2000, Vista, 7, 10 ...)
# * `make` may otherwise use an incorrect shell (eg, `bash`), if found; "syntax error: unexpected end of file" error output is indicative
ifeq (${OS},Windows_NT)
# use case and location fallbacks; note: assumes *no spaces* within ${ComSpec}, ${SystemRoot}, or ${windir}
COMSPEC := $(or ${ComSpec},${COMSPEC},${comspec})
SystemRoot := $(or ${SystemRoot},${SYSTEMROOT},${systemroot},${windir})
SHELL := $(firstword $(wildcard ${COMSPEC} ${SystemRoot}/System32/cmd.exe) cmd)
endif
# $(info SHELL=${SHELL})

devnull = NUL

####

# detect $(CC)
CC_version_check_flags := -v
ifeq (${CC},cl)
CC_version_check_flags :=
endif
ifeq (,$(shell "$(CC)" ${CC_version_check_flags} >${devnull} 2>&1 && echo $(CC) present))
$(error ERR!: Missing required compiler (`$(CC)`))
endif

# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.
ifneq ($(makefile_dir),$(current_dir))
$(error ERR!: Invalid current directory; this makefile must be invoked from the directory it resides in)
endif

####

ifeq (${NAME},)
override NAME = $(notdir $(abspath $(dir $(abspath $(lastword ${MAKEFILE_LIST})))))
endif

NULL :=
SPACE := $() $()
DQUOTE := \"
BQUOTE := $(firstword \` \`)
ifeq ($(OS),Windows_NT)
DQUOTE := $(subst \,,$(DQUOTE))
BQUOTE := $(subst \,,$(BQUOTE))
endif

####

makefile_path := $(lastword ${MAKEFILE_LIST})
makefile_abs_path := $(abspath ${makefile_path})
makefile_dir := $(abspath $(dir ${makefile_abs_path}))
current_dir := ${CURDIR}

# $(info MAKEFILE_LIST="${MAKEFILE_LIST}")
# $(info makefile_path="$(makefile_path)")
# $(info makefile_abs_path="$(makefile_abs_path)")
# $(info makefile_dir="$(makefile_dir)")
# $(info current_dir="$(current_dir)")

OBJ_deps += ${makefile_abs_path}

ifeq (${makefile_path},Makefile)
make_help_alias ?= make
else
make_help_alias ?= make -f "${makefile_path}"
endif

ifeq (${SPACE},$(findstring ${SPACE},${mkfile_abs_path}))
$(info WARN: <SPACE>'s within project directory may cause issues)
endif

OUT_DIR_EXT=
ifneq (${TARGET},)
CFLAGS += --target=$(TARGET)
OUT_DIR_EXT =.$(TARGET)
else
ifneq (${ARCH},$(filter ${ARCH},32 i686 x32 x86 64 x64 x86_64))
$(error ERR!: Unknown architecture "$(ARCH)"; valid values are ["", "32", "i686", "x32", "x86", "64", "x64", "x86_64"])
endif
ifeq (${OS},Windows_NT)
ifeq (${ARCH},)
CC_machine := $(shell ${CC})
override ARCH := $(or $(filter $(subst -, ,${CC_machine}),i686 x86_64),i686)
endif
# $(info ARCH="${ARCH}")
endif
ifneq (,$(filter ${ARCH},32 i686 x32 x86))
ARCH_norm := 32
# TARGET := i686-unknown-windows-gnu
endif
ifneq (,$(filter ${ARCH},64 x64 x86_64))
ARCH_norm := 64
# TARGET := x86_64-unknown-windows-gnu
endif
# CFLAGS += -m${ARCH_norm}
# LDFLAGS += -m${ARCH_norm}
OUT_DIR_EXT =.x${ARCH_norm}
endif # defined ${TARGET}

####

OS_PREFIX  = win.
CP 		   = copy /y
AWK		   = goawk
ECHO 	   = echo
GREP	   = grep
MKDIR 	   = mkdir
RM 		   = del
RM_r 	   = $(RM) /s
RMDIR	   = rmdir /s/q
FIND	   = "$(SystemRoot)\System32\find"
FINDSTR    = "$(SystemRoot)\System32\findstr"
MORE	   = "$(SystemRoot)\System32\more"
SORT	   = "$(SystemRoot)\System32\sort"

####

# $(info CC=$(CC))
# $(info CFLAGS=$(CFLAGS))
# FixME: revise to leave directory clean of intermediate files and remove need for extra "test" file; move to 'intermediate' file directory
test_file_stem = $(subst ${SPACE},_,_MAKE_${CC}_${TARGET}_test_)
ARCH_available := $(shell ${ECHO} \#include ^<stdio.h^> > ${test_file_stem}.c && ${ECHO} int main(void){printf("${test_file_stem}");return 0;} >> ${test_file_stem}.c && ${CC} ${CFLAGS} ${test_file_stem}.c >${devnull} && ${ECHO} true&& ${RM} ${test_file_stem}.*)
# $(info ARCH=$(ARCH))
# $(info ARCH_norm=$(ARCH_norm))
# $(info TARGET=$(TARGET))
# $(info .SHELLSTATUS=$(.SHELLSTATUS))
# $(info ARCH_available=$(ARCH_available))
ifneq (${ARCH_available},true)
$(error ERR!: Architecture "${ARCH}" is unavailable/unimplemented for this version of `${CC}`)
endif

####

is_VC6 = $(shell "${CC}" 2>&1 | "%SystemRoot%\System32\findstr" /i /c:"compiler version 12.")

# VC6-specific flags
ifneq (,${is_VC6})
## /ignore:4254 :: suppress "merging sections with different attributes" warning (LNK4254)
LDFLAGS += LDFLAGS_VC6
endif

####

PROJECT_TARGET = ${NAME}${EXEEXT}
${PROJECT_TARGET}: ## *default* target (see recipe/rule below)

####

SRC_DIR = src
OUT_DIR = $(BUILD_DIR)/$(OS_PREFIX)$(CONFIG).$(CC)$(OUT_DIR_EXT)
BIN_DIR = $(OUT_DIR)/bin
OBJ_DIR = $(OUT_DIR)/obj

SRC_files := $(wildcard $(SRC_DIR)/*.c $(SRC_DIR)/*.cpp $(SRC_DIR)/*.cxx)
# SRC_files := $(addprefix ",$(addsuffix ",$(SRC_files)))
OBJ_files := $(SRC_files)
OBJ_files := $(OBJ_files:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.$(O))
OBJ_files := $(OBJ_files:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.$(O))
OBJ_files := $(OBJ_files:$(SRC_DIR)/%.cxx=$(OBJ_DIR)/%.$(O))

OBJ_files := \
	main.${O} screen.${O} brac.${O} ch.${O} charset.${O} cmdbuf.${O} \
	command.${O} cvt.${O} decode.${O} edit.${O} filename.${O} forwback.${O} \
	help.${O} ifile.${O} input.${O} jump.${O} line.${O} linenum.${O} \
	lsystem.${O} mark.${O} optfunc.${O} option.${O} opttbl.${O} os.${O} \
	output.${O} pattern.${O} position.${O} prompt.${O} search.${O} signal.${O} \
	tags.${O} ttyin.${O} version.${O} regexp.${O}

AUX_EXES = lessecho${EXEEXT} lesskey${EXEEXT}

####

%.${O} : %.c ${OBJ_deps}
	${CC} ${CFLAGS_COMPILE_ONLY} ${CPPFLAGS} ${CFLAGS} "$<"

${PROJECT_TARGET}: ${OBJ_files} | ${BIN_DIR}
	${LD} ${LDFLAGS} $(addprefix ",$(addsuffix ",${OBJ_files})) ${LIBS} /out:"$@"
	@${ECHO} SUCCESS: made "$@"

${AUX_EXES}: %${EXEEXT}: %.${O} version.${O} | ${BIN_DIR}
	${LD} ${LDFLAGS} "$<" "version.${O}" ${LIBS} /out:"$@"
	@${ECHO} SUCCESS: made "$@"

${OBJ_files}: ${OBJ_deps} | ${OBJ_DIR}

defines.h: defines.${DEFINETYPE}
	${CP} defines.${DEFINETYPE} defines.h

.PHONY: clean
clean: ## Remove build artifacts (including intermediate files)
	@if EXIST "*.${O}" ${RM} "*.${O}" && echo "*.${O}" file^(s^) removed
	@if EXIST "defines.h" ${RM} "defines.h" && echo "defines.h" removed
	@if EXIST "less${EXEEXT}" ${RM} "less${EXEEXT}" && echo "less${EXEEXT}" removed
	@for %%G in (${AUX_EXES}) do if EXIST "%%G" ${RM} "%%G" && echo "%%G" removed

.PHONY: help
help:
	@echo usage: $(BQUOTE)$(make_help_alias) [ARCH=..] [MAKE_TARGET...]$(BQUOTE)
	@echo * builds $(BQUOTE)$(PROJECT_TARGET)$(BQUOTE) within $(DQUOTE)$(current_dir)$(DQUOTE)
	@echo MAKE_TARGETs:
	@$(FINDSTR) "^[a-zA-Z-]*:.*##.*" "$(makefile_path)" | $(SORT) | for /f "tokens=1-2,* delims=:#" %%g in ('$(MORE)') do @(@call set "t=%%g                " & @call echo %%t:~0,15%% %%i )

.PHONY: run
run: ${PROJECT_TARGET} ## Build/execute project executable
	@"$<"

.PHONY: all build build-aux compile realclean rebuild vclean veryclean
all: build build-aux ## Build all project executables
build: ${PROJECT_TARGET} ## Build project
build-aux: ${AUX_EXES} ## Build auxillary executables (`lessecho` and `lesskey`)
compile: ${OBJ_files} ## Build intermediate files
realclean: clean
rebuild: clean build ## Clean and rebuild project
vclean: realclean
veryclean: realclean

$(BIN_DIR):
	$(MKDIR) "$(BIN_DIR)"

$(OBJ_DIR):
	$(MKDIR) "$(OBJ_DIR)"

$(OUT_DIR):
	$(MKDIR) "$(OUT_DIR)"
