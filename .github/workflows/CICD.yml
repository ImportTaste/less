name: CICD

# Copyright (C) 2020 ~ Roy Ivy III <rivy.dev@gmail.com>; MIT+Apache-2.0 license

# spell-checker:ignore (abbrev/acronyms) ASAN CICD CodeCOV LLVM MSVC MacOS MinGW TSAN UBSAN
# spell-checker:ignore (env/flags) CFLAGS CXXFLAGS LDFLAGS Ccodegen Coverflow fsanitize
# spell-checker:ignore (jargon) SHAs deps falsey softprops toolchain truthy
# spell-checker:ignore (names) Bionic Bionic's Peltoche Xenial ilammy rivy
# spell-checker:ignore (shell/tools) chmod choco clippy cmake ctest dmake dpkg esac fakeroot gmake grcov halium lcov libssl libtsan mkdir popd printf pushd rustc rustfmt rustup shopt valgrind xargs xcode
# spell-checker:ignore (misc) alnum gnueabihf issuecomment libc libncurses maint multilib ncurses nullglob onexitbegin onexitend uutils

# spell-checker:ignore () lessecho lesskey

env:
  PROJECT_NAME: less
  PROJECT_DESC: "`less` is more"

on: [push, pull_request]

jobs:
  CICD:
    name: Build
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, compiler: clang, arch: x32 }
          - { os: ubuntu-latest, compiler: clang, arch: x64 }
          - { os: ubuntu-latest, compiler: gcc, arch: x32 }
          - { os: ubuntu-latest, compiler: gcc, arch: x64 }
          - { os: ubuntu-latest, compiler: clang, arch: x32, static: static }
          - { os: ubuntu-latest, compiler: clang, arch: x64, static: static }
          - { os: ubuntu-latest, compiler: gcc, arch: x32, static: static }
          - { os: ubuntu-latest, compiler: gcc, arch: x64, static: static }
          # - { os: macos-latest, compiler: xcode, version: "11.3" }
          - { os: windows-latest, compiler: cl, arch: x32 }
          - { os: windows-latest, compiler: cl, arch: x64 }
          - { os: windows-latest, compiler: clang, arch: x32 }
          - { os: windows-latest, compiler: clang, arch: x64 }
          # - { os: windows-latest, compiler: gcc, arch: x32 } ## unavailable
          - { os: windows-latest, compiler: gcc, arch: x64 }
          - { os: windows-latest, compiler: cl, arch: x32, static: static }
          - { os: windows-latest, compiler: cl, arch: x64, static: static }
          - { os: windows-latest, compiler: clang, arch: x32, static: static }
          - { os: windows-latest, compiler: clang, arch: x64, static: static }
          # - { os: windows-latest, compiler: gcc, arch: x32, static: static } ## unavailable
          - { os: windows-latest, compiler: gcc, arch: x64, static: static }
    steps:
      - uses: actions/checkout@v1
      - name: Initialize workflow variables
        id: vars
        shell: bash
        run: |
          ## VARs setup
          falsey='false 0 f off n no'
          is_truthy() { if [[ -z "$1" ]] || [[ " ${falsey} " == *" ${1,,} "* ]]; then false; else true; fi; }
          ##as_truthy() { if is_truthy "$1"; then echo 'true'; else echo 'false'; fi; }
          # staging directory
          STAGING='_staging'
          echo set-output name=STAGING::${STAGING}
          echo ::set-output name=STAGING::${STAGING}
          # normalize ARCH_ID
          ARCH_ID='${{ matrix.job.arch }}'
          case "${ARCH_ID}" in
            32 | x32 | x86 | i686) ARCH_ID="x86" ; CONFIG_ARCH_ID="i686" ; CC_ARCH_ID="32" ;;
            64 | x64 | x86_64) ARCH_ID=x64 ; CONFIG_ARCH_ID="x86_64" ; CC_ARCH_ID="64" ;;
          esac;
          echo set-output name=ARCH_ID::${ARCH_ID}
          echo ::set-output name=ARCH_ID::${ARCH_ID}
          echo set-output name=CONFIG_ARCH_ID::${CONFIG_ARCH_ID}
          echo ::set-output name=CONFIG_ARCH_ID::${CONFIG_ARCH_ID}
          echo set-output name=CC_ARCH_ID::${CC_ARCH_ID}
          echo ::set-output name=CC_ARCH_ID::${CC_ARCH_ID}
          # handle STATIC
          LDFLAGS_STATIC_true=''
          if is_truthy '${{ matrix.job.static }}'; then LDFLAGS_STATIC_true='-static'; fi;
          echo set-output name=LDFLAGS_STATIC_true::${LDFLAGS_STATIC_true}
          echo ::set-output name=LDFLAGS_STATIC_true::${LDFLAGS_STATIC_true}
          # determine EXE suffix
          EXE_suffix='' ; case '${{ matrix.job.os }}' in windows-*) EXE_suffix='.exe' ;; esac;
          echo set-output name=EXE_suffix::${EXE_suffix}
          echo ::set-output name=EXE_suffix::${EXE_suffix}
          # parse commit reference info
          echo GITHUB_REF=${GITHUB_REF}
          echo GITHUB_SHA=${GITHUB_SHA}
          REF_NAME=${GITHUB_REF#refs/*/}
          unset REF_BRANCH ; case "${GITHUB_REF}" in refs/heads/*) REF_BRANCH=${GITHUB_REF#refs/heads/} ;; esac;
          unset REF_TAG ; case "${GITHUB_REF}" in refs/tags/*) REF_TAG=${GITHUB_REF#refs/tags/} ;; esac;
          REF_SHAS=${GITHUB_SHA:0:8}
          echo set-output name=REF_NAME::${REF_NAME}
          echo set-output name=REF_BRANCH::${REF_BRANCH}
          echo set-output name=REF_TAG::${REF_TAG}
          echo set-output name=REF_SHAS::${REF_SHAS}
          echo ::set-output name=REF_NAME::${REF_NAME}
          echo ::set-output name=REF_BRANCH::${REF_BRANCH}
          echo ::set-output name=REF_TAG::${REF_TAG}
          echo ::set-output name=REF_SHAS::${REF_SHAS}
          # package name
          PKG_suffix=".tar.gz" ; case '${{ matrix.job.os }}' in windows-*) PKG_suffix=".zip" ;; esac;
          OS_name=$( echo "${{ matrix.job.os }}" | grep -Eo '^\s*([^-]+)' | tr '[:upper:]' '[:lower:]' )
          PKG_OS_name=${OS_name}
          case "${OS_name}" in macos) PKG_OS_name=mac ;; ubuntu) PKG_OS_name=nix ;; windows) PKG_OS_name=win ;; esac;
          if is_truthy '${{ matrix.job.static }}'; then
            STATIC_suffix=".static"
            PKG_stem="${PROJECT_NAME}-${REF_TAG:-$REF_SHAS}-${PKG_OS_name}-${{ matrix.job.arch }}"
          else
            STATIC_suffix=".dyn"
            PKG_stem="${PROJECT_NAME}-${REF_TAG:-$REF_SHAS}-${OS_name}-${{ matrix.job.arch }}"
          fi
          PKG_basename="${PKG_stem}${STATIC_suffix}.(${{ matrix.job.compiler }})"
          PKG_name="${PKG_basename}${PKG_suffix}"
          echo set-output name=PKG_stem::${PKG_stem}
          echo set-output name=PKG_suffix::${PKG_suffix}
          echo set-output name=PKG_basename::${PKG_basename}
          echo set-output name=PKG_name::${PKG_name}
          echo ::set-output name=PKG_stem::${PKG_stem}
          echo ::set-output name=PKG_suffix::${PKG_suffix}
          echo ::set-output name=PKG_basename::${PKG_basename}
          echo ::set-output name=PKG_name::${PKG_name}
          # deployable tag? (ie, leading "vM" or "M"; M == version number)
          unset DEPLOYABLE ; if [[ $REF_TAG =~ ^[vV]?[0-9].* ]]; then DEPLOYABLE='true' ; fi
          echo set-output name=DEPLOYABLE::${DEPLOYABLE:-<empty>/false}
          echo ::set-output name=DEPLOYABLE::${DEPLOYABLE}
          # * strip executable?
          STRIP="strip" ; case '${{ matrix.job.os }}' in windows-*) STRIP='' ;; esac;
          echo set-output name=STRIP::${STRIP:-<empty>/false}
          echo ::set-output name=STRIP::${STRIP}
      - name: Create all needed build/work directories
        shell: bash
        run: |
          ## create build/work space
          mkdir -p '${{ steps.vars.outputs.STAGING }}'
          mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}'
          mkdir -p '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin'
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ steps.vars.outputs.ARCH_ID }}
      # ref: <https://github.com/actions/virtual-environments/issues/104#issuecomment-596259045>@@<http://archive.is/orSp7>
      - name: Install LLVM
        run: choco install -y llvm
        if: runner.os == 'Windows' && matrix.job.compiler == 'clang'
      - name: Install/setup prerequisites
        shell: bash
        run: |
          ## install/setup prerequisites
          case '${{ matrix.job.os }}' in
            ubuntu-*)
              sudo dpkg --add-architecture i386
              sudo dpkg --add-architecture amd64
              # note: list of current dpkg architectures held at '/var/lib/dpkg/arch'
              sudo apt-get -y update
              sudo apt-get -y install lib32ncurses5-dev libncurses5-dev gcc-multilib clang
            ;;
            windows-*)
              case '${{ matrix.job.compiler }}' in clang) echo "::add-path::C:/Program Files/LLVM/bin" ;; esac;
            ;;
          esac
          case '${{ matrix.job.compiler }}' in
            cl) CC=cl ; CXX=cl
              # repair for link path error (o/w '/usr/bin/link' has priority)
              LD=$(which "${CC}")/../link.exe
              ;;
            clang) CC=clang ; CXX=clang++ ; LD=${CXX} ;;
            gcc) CC=gcc ; CXX=g++ ; LD=${CXX} ;;
          esac
          echo "::set-env name=CC::${CC}"
          echo "::set-env name=CXX::${CXX}"
          echo "::set-env name=LD::${LD}"
      - name: Info
        shell: bash
        run: |
          # Info
          ### environment
          # echo "## environment"
          # echo PATH=${PATH}
          ## commit info
          echo "## commit"
          echo GITHUB_REF=${GITHUB_REF}
          echo GITHUB_SHA=${GITHUB_SHA}
          ## tooling info display
          echo "## tooling"
          which cl 2>/dev/null && (cl 2>&1 | head -1) || true
          which clang 2>/dev/null && (clang --version | head -1) || true
          which gcc 2>/dev/null && (gcc --version | head -1) || true
          which link 2>/dev/null || true
          echo "CC=${CC}"
          echo "CXX=${CXX}"
      - name: Build
        shell: bash
        run: |
          case '${{ matrix.job.os }}' in
            ubuntu-*)
              sudo chmod a+x ./configure
              CFLAGS="-g -O2 -m${{ steps.vars.outputs.CC_ARCH_ID }}"
              LDFLAGS="-m${{ steps.vars.outputs.CC_ARCH_ID }} ${{ steps.vars.outputs.LDFLAGS_STATIC_true }}"
              CFLAGS="$(echo "${CFLAGS}" | xargs echo)" ## compress/trim whitespace
              LDFLAGS="$(echo "${LDFLAGS}" | xargs echo)" ## compress/trim whitespace
              ./configure CFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
            ;;
            windows-*)
              cp Makefile.win Makefile
            ;;
          esac
          make CC="${CC}" CXX="${CXX}" LD="${LD}" ARCH='${{ steps.vars.outputs.ARCH_ID }}' STATIC='${{ matrix.job.static }}' all
          cp '${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/'
          cp 'lessecho${{ steps.vars.outputs.EXE_suffix }}' '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/'
          cp 'lesskey${{ steps.vars.outputs.EXE_suffix }}' '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/'
          case '${{ matrix.job.os }}' in ubuntu-*) strip '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/'*'${{ steps.vars.outputs.EXE_suffix }}' ;; esac;
      # - name: Test
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: ${{ steps.vars.outputs.CARGO_USE_CROSS }}
      #     command: test
      #     args: --target=${{ matrix.job.target }} ${{ steps.vars.outputs.CARGO_TEST_OPTIONS}} ${{ matrix.job.cargo-options }} ${{ steps.vars.outputs.CARGO_FEATURES_OPTION }}
      - name: Archive executable artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.vars.outputs.PKG_basename }}
          path: ${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}
      - name: Package
        shell: bash
        run: |
          ## package artifact(s)
          # # binary
          # cp 'less${{ steps.vars.outputs.EXE_suffix }}' '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/'
          # `strip` binary (if needed)
          if [ -n "${{ steps.vars.outputs.STRIP }}" ]; then "${{ steps.vars.outputs.STRIP }}" '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/bin/${{ env.PROJECT_NAME }}${{ steps.vars.outputs.EXE_suffix }}' ; fi
          # README and LICENSE
          ## * spell-checker:ignore EADME ICENSE
          (shopt -s nullglob; for f in [R]"EADME"{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/' ; done)
          (shopt -s nullglob; for f in [L]"ICENSE"{-*,}{,.*}; do cp $f '${{ steps.vars.outputs.STAGING }}/${{ steps.vars.outputs.PKG_basename }}/' ; done)
          # core compressed package
          pushd '${{ steps.vars.outputs.STAGING }}/' >/dev/null
          rm -rf ./publish
          mkdir ./publish
          cd '${{ steps.vars.outputs.PKG_basename }}'
          case '${{ matrix.job.os }}' in
            windows-*)
              7z -y a ../publish/'${{ steps.vars.outputs.PKG_name }}' *
              if [ '${{ matrix.job.arch }}' == 'x32' ] && [ '${{ matrix.job.compiler }}' == 'cl' ] && [ '${{ matrix.job.static }}' == 'static' ]; then
                ##cp ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
                mv ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
              fi
              if [ '${{ matrix.job.arch }}' == 'x64' ] && [ '${{ matrix.job.compiler }}' == 'gcc' ] && [ '${{ matrix.job.static }}' == 'static' ]; then
                ##cp ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
                mv ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
              fi
              ;;
            *)
              tar czf ../publish/'${{ steps.vars.outputs.PKG_name }}' *
              if [ '${{ matrix.job.compiler }}' == 'clang' ] && [ '${{ matrix.job.static }}' == 'static' ]; then
                ##cp ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
                mv ../publish/'${{ steps.vars.outputs.PKG_name }}' ../publish/'${{ steps.vars.outputs.PKG_stem }}${{ steps.vars.outputs.PKG_suffix }}'
              fi
              ;;
          esac
          popd >/dev/null
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: steps.vars.outputs.DEPLOYABLE && matrix.jobs.static == 'static'
        with:
          files: |
            ${{ steps.vars.outputs.STAGING }}/publish/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
